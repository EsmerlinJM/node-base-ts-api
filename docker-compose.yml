version: '3'
services:

  # Postgress
  postgres:
    image: postgres:latest
    ports:
      - '${TYPEORM_PORT}:${TYPEORM_PORT}'
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql

  # Redis
  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
        - '${REDIS_PORT}:${REDIS_PORT}'
  
  # Node API
  node-api-base:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    environment:
      PORT: "${PORT}"
      JWT_SECRET: "${JWT_SECRET}"
      TYPEORM_TYPE: postgres
      TYPEORM_HOST: postgres
      TYPEORM_USERNAME: postgres
      TYPEORM_PASSWORD: postgres
      TYPEORM_DATABASE: "${TYPEORM_DATABASE}"
      TYPEORM_PORT: "${TYPEORM_PORT}"
      TYPEORM_SYNCHRONIZE: "true"
      TYPEORM_LOGGING: "true"
      TYPEORM_MIGRATIONS_RUN: "${TYPEORM_MIGRATIONS_RUN}"
      ACCESS_TOKEN_LIFE: "${ACCESS_TOKEN_LIFE}"
      RATE_LIMIT_WINDOW: "${RATE_LIMIT_WINDOW}"
      RATE_LIMIT_MAX_REQUESTS: "${RATE_LIMIT_MAX_REQUESTS}"
    ports:
      - '${PORT}:${PORT}'
    restart: on-failure
    container_name: node-ts-api-base
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    volumes:
      - "./src:/app/src"
      - /src/node_modules